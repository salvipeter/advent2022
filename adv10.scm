(define input
  (call-with-input-file "adv10.txt"
    (lambda (f)
      (let loop ()
        (let ((cmd (read f)))
          (cond ((eof-object? cmd) '())
                ((eq? 'noop cmd) (cons '(noop) (loop)))
                (else (let ((n (read f)))
                        (cons `(addx ,n) (loop))))))))))

(define (step state)
  (let ((sum (car state))
        (x (cadr state))
        (cycle (caddr state)))
    (if (= (mod cycle 40) 20)
        (list (+ sum (* cycle x)) x (+ cycle 1))
        (list sum x (+ cycle 1)))))

(define (add state n)
  (list (car state) (+ (cadr state) n) (caddr state)))

(define (adv10 data)
  (car (fold (lambda (cmd state)
               (case (car cmd)
                 ((noop) (step state))
                 ((addx) (add (step (step state)) (cadr cmd)))))
             '(0 1 1) data)))

(define (crt state)
  (let* ((x (cadr state))
         (cycle (caddr state))
         (pos (mod (- cycle 1) 40)))
    (display (if (< (abs (- pos x)) 2) #\# #\.))
    (when (= (mod cycle 40) 0)
      (newline))
    (list #f x (+ cycle 1))))

(define (adv10b data)
  (fold (lambda (cmd state)
          (case (car cmd)
            ((noop) (crt state))
            ((addx) (add (crt (crt state)) (cadr cmd)))))
        '(#f 1 1) data)
  #t)
